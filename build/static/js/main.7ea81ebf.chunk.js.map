{"version":3,"sources":["components/Page.js","services/events-service.js","components/list.js","views/events.js","App.js","serviceWorker.js","index.js"],"names":["Content","Layout","Page","props","children","events","id","description","title","categories","location","startDate","endDate","summary","url","ListComponent","header","footer","bordered","dataSource","renderItem","item","Item","extra","href","style","width","Component","EventsView","render","Index","avatar","paragraph","rows","block","type","to","App","path","exact","component","EventDetailView","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAMQA,G,OAAYC,IAAZD,SAiBOE,EAfF,SAAAC,GAAK,OAChB,kBAAC,IAAD,KACE,kBAACH,EAAD,KACGG,EAAMC,Y,4FCTAC,EAAS,CACpB,CACEC,GAAI,IACJC,YAAa,YACbC,MAAO,aACPC,WAAY,GACZC,SAAU,MACVC,UAAW,YACXC,QAAS,IACTC,QAAS,YACTC,IAAK,IAEP,CACER,GAAI,IACJC,YAAa,YACbC,MAAO,aACPC,WAAY,GACZC,SAAU,MACVC,UAAW,YACXC,QAAS,IACTC,QAAS,YACTC,IAAK,IAEP,CACER,GAAI,IACJC,YAAa,YACbC,MAAO,aACPC,WAAY,GACZC,SAAU,MACVC,UAAW,YACXC,QAAS,IACTC,QAAS,YACTC,IAAK,IAEP,CACER,GAAI,IACJC,YAAa,YACbC,MAAO,aACPC,WAAY,GACZC,SAAU,MACVC,UAAW,YACXC,QAAS,IACTC,QAAS,YACTC,IAAK,KCvCYC,E,iLAKjB,OAEE,6BAEE,kBAAC,IAAD,CACEC,OAAQ,6BAAK,uCACbC,OAAQ,uCACRC,UAAQ,EACRC,WAAYd,EACZe,WAAY,SAAAC,GAAI,OACd,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CAAMd,MAAOa,EAAKb,MAAOe,MAAO,uBAAGC,KAAK,KAAR,QAAsBC,MAAO,CAAEC,MAAO,MACpE,2CACCL,EAAKd,YACN,0CACCc,EAAKV,UACN,wCACCU,EAAKT,kB,GAtBqBe,aCS5BC,E,2MAPbC,OAAS,kBACP,kBAAC,EAAD,KACE,kBAAC,EAAD,Q,2FANmBF,aCOzB,SAASG,EAAM3B,GACb,OAAO,kBAAC,EAAD,KACL,kBAAC,IAAD,CAAU4B,QAAM,EAACC,UAAW,CAAEC,KAAM,KACpC,kBAAC,IAAD,CAAQC,OAAK,EAACC,KAAK,WAAU,kBAAC,IAAD,CAAMC,GAAG,YAAT,mBAC7B,kBAAC,IAAD,CAAUL,QAAM,EAACC,UAAW,CAAEC,KAAM,MAiBzBI,MAbf,WACE,OACE,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,KAAK,WAAWE,UAAWZ,IAClC,kBAAC,IAAD,CAAOU,KAAK,UAAUE,UAAWC,MCdnBC,QACW,cAA7BC,OAAOjC,SAASkC,UAEe,UAA7BD,OAAOjC,SAASkC,UAEhBD,OAAOjC,SAASkC,SAASC,MACvB,2DCTNC,IAASjB,OAAO,kBAAC,EAAD,MAASkB,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7ea81ebf.chunk.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Layout } from 'antd';\n\nimport './Page.css';\n\nconst { Content } = Layout;\n\nconst Page = props => (\n  <Layout>\n    <Content>\n      {props.children}\n    </Content>\n  </Layout>\n);\n\nPage.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default Page;\n","\n\nexport const events = [\n  {\n    id: \"1\",\n    description: \"Some desc\",\n    title: \"My Title 1\",\n    categories: [],\n    location: \"1,1\",\n    startDate: \"Some desc\",\n    endDate: \"1\",\n    summary: \"Some desc\",\n    url: \"\"\n  },\n  {\n    id: \"2\",\n    description: \"Some desc\",\n    title: \"My Title 2\",\n    categories: [],\n    location: \"1,1\",\n    startDate: \"Some desc\",\n    endDate: \"1\",\n    summary: \"Some desc\",\n    url: \"\"\n  },\n  {\n    id: \"3\",\n    description: \"Some desc\",\n    title: \"My Title 3\",\n    categories: [],\n    location: \"1,1\",\n    startDate: \"Some desc\",\n    endDate: \"1\",\n    summary: \"Some desc\",\n    url: \"\"\n  },\n  {\n    id: \"1\",\n    description: \"Some desc\",\n    title: \"My Title 4\",\n    categories: [],\n    location: \"1,1\",\n    startDate: \"Some desc\",\n    endDate: \"1\",\n    summary: \"Some desc\",\n    url: \"\"\n  }\n]\n\n\nexport const listEvents = () => new Promise((resolve, reject) => (\n  resolve(events)\n));\n\nexport const getEvent = (id) => new Promise((resolve, reject) => (\n  events.forEach(event => {\n    if (event.id === id) {\n      resolve(event);\n    } else {\n      reject(null)\n    }\n  })\n));\n\n","import React, { Component } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { List, Card } from 'antd';\nimport { Link } from 'react-router-dom'\nimport { events } from \"../services/events-service\";\n\nexport default class ListComponent extends Component {\n\n\n\n  render() {\n    return (\n\n      <div>\n\n        <List\n          header={<div><h1>Events</h1></div>}\n          footer={<div>Footer</div>}\n          bordered\n          dataSource={events}\n          renderItem={item => (\n            <List.Item>\n              <Card title={item.title} extra={<a href=\"#\">More</a>} style={{ width: 300 }}>\n                <h4>Description</h4>\n                {item.description}\n                <h4>Start Date</h4>\n                {item.startDate}\n                <h4>End Date</h4>\n                {item.endDate}\n              </Card>\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n\n  }\n}","import React, { Component } from 'react';\nimport ListItems from '../components/list'\nimport Page from '../components/Page';\n\nclass EventsView extends Component {\n  componentDidMount() {\n  }\n\n  render = () => (\n    <Page>\n      <ListItems />\n    </Page>\n  );\n}\n\nexport default EventsView;\n\n","import React from 'react';\nimport Page from './components/Page';\n\nimport { Button, Skeleton } from 'antd'\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport EventsView from './views/events'\nimport EventDetailView from './views/events'\n\n// const { Content } = Layout;\n\nfunction Index(props) {\n  return <Page>\n    <Skeleton avatar paragraph={{ rows: 7 }} />\n    <Button block type=\"primary\"><Link to=\"/events/\">Take Action!!!</Link></Button>\n    <Skeleton avatar paragraph={{ rows: 7 }} />\n  </Page>\n}\n\nfunction App() {\n  return (\n    <Router>\n\n\n      <Route path=\"/\" exact component={Index} />\n      <Route path=\"/events/\" component={EventsView} />\n      <Route path=\"/event/\" component={EventDetailView} />\n      {/* <Route path=\"/petitions-detail/\" component={Users} /> */}\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'antd/dist/antd.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}