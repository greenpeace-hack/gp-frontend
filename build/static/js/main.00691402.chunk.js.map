{"version":3,"sources":["components/Page.js","services/events-service.js","services/api-service.js","components/list.js","views/events.js","views/eventDetail.js","components/map.js","views/mapView.js","App.js","serviceWorker.js","index.js"],"names":["Content","Layout","Page","props","children","supporters","axios","timeout","id","firstName","lastName","email","events","description","title","categories","location","startDate","endDate","summary","url","ListComponent","header","onBack","this","subTitle","footer","bordered","dataSource","data","renderItem","item","Item","type","extra","to","pathname","state","style","width","Component","EventsView","render","goBack","window","history","back","Promise","resolve","reject","then","setState","catch","EventDetailView","size","geoCoords","split","lat","parseFloat","lng","Map","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","visible","isMarkerShown","position","MapView","googleMapURL","API_KEY","loadingElement","height","showMap","containerElement","mapElement","console","log","Index","avatar","paragraph","rows","block","App","path","exact","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00691402.chunk.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Layout } from 'antd';\n\nimport './Page.css';\n\nconst { Content } = Layout;\n\nconst Page = props => (\n  <Layout>\n    <Content>\n      {props.children}\n    </Content>\n  </Layout>\n);\n\nPage.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport default Page;\n","import { get } from '../services/api-service'\n\nexport const supporters = [\n  {\n    id: '1232',\n    firstName: 'Bob',\n    lastName: 'Murphy',\n    email: 'bm@example.com'\n  },\n  {\n    id: '154',\n    firstName: 'Bob',\n    lastName: 'Murphy',\n    email: 'bm@example.com'\n  },\n  {\n    id: '764',\n    firstName: 'Bob',\n    lastName: 'Murphy',\n    email: 'bm@example.com'\n  },\n  {\n    id: '9776',\n    firstName: 'Bob',\n    lastName: 'Murphy',\n    email: 'bm@example.com'\n  },\n  {\n    id: '134566',\n    firstName: 'Bob',\n    lastName: 'Murphy',\n    email: 'bm@example.com'\n  },\n  {\n    id: '3457',\n    firstName: 'Bob',\n    lastName: 'Murphy',\n    email: 'bm@example.com'\n  },\n]\n\nlet events = [\n  {\n    id: \"1\",\n    description: \"Some desc\",\n    title: \"My Title 1\",\n    categories: [],\n    location: \"1,1\",\n    startDate: \"Some desc\",\n    endDate: \"1\",\n    summary: \"Some desc\",\n    url: \"\"\n  },\n  {\n    id: \"2\",\n    description: \"Some desc\",\n    title: \"My Title 2\",\n    categories: [],\n    location: \"1,1\",\n    startDate: \"Some desc\",\n    endDate: \"1\",\n    summary: \"Some desc\",\n    url: \"\"\n  },\n  {\n    id: \"3\",\n    description: \"Some desc\",\n    title: \"My Title 3\",\n    categories: [],\n    location: \"1,1\",\n    startDate: \"Some desc\",\n    endDate: \"1\",\n    summary: \"Some desc\",\n    url: \"\"\n  },\n  {\n    id: \"1\",\n    description: \"Some desc\",\n    title: \"My Title 4\",\n    categories: [],\n    location: \"1,1\",\n    startDate: \"Some desc\",\n    endDate: \"1\",\n    summary: \"Some desc\",\n    url: \"\"\n  }\n]\n\n// export const listSupporters = () new Promise((resolve, ))\n\n\nexport const listEvents = () => new Promise((resolve, reject) => (\n  resolve(events)\n\n  // get('/events').then((data) => {\n  //   // events = data;\n  //   resolve(data)\n  // }).catch(() => {\n  //   reject([])\n  // })\n));\n\nexport const getEvent = (id) => new Promise((resolve, reject) => (\n  events.forEach(event => {\n    if (event.id === id) {\n      resolve(event);\n    } else {\n      reject(null)\n    }\n  })\n));\n\n","import * as axios from 'axios';\n\nconst host = \"http://localhost:3000\";\n\n// const host = \"http://backend-p4-demo.apps.8fe2.events.opentlc.com\";\n\nconst instance = axios.create({\n  timeout: 60000,\n});\n\n/**\n * Send a GET request\n * @param {string} path - Path to be appended to host URL\n */\nexport const get = path => new Promise(\n  (resolve, reject) => instance.get(`${host}/${path}`)\n    .then(res => resolve(res))\n    .catch(err => reject(err.response)),\n);\n\n/**\n * Send a POST request\n * @param {string} path - Path to be appended to host URL\n * @param {any} params - Params to be sent with the request\n */\nexport const post = (path, params) => new Promise(\n  (resolve, reject) => instance.post(`${host}/${path}`, params)\n    .then(res => resolve(res))\n    .catch(err => reject(err.response))\n);","import React, { Component } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { List, Card } from 'antd';\nimport { Link } from 'react-router-dom'\nimport { events } from \"../services/events-service\";\n\nimport { PropTypes } from 'prop-types';\nimport { PageHeader } from 'antd';\n\n\nclass ListComponent extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n\n      <div>\n\n        <List\n          header={<PageHeader onBack={() => null} title={this.props.title} subTitle={this.props.subTitle} />}\n          footer={<div>Footer</div>}\n          bordered\n          dataSource={this.props.data}\n          renderItem={item => (\n            <List.Item>\n              <Card type=\"inner\" title={item.title} extra={<Link to={{ pathname: \"/event/\" + item.id, state: item }}>More</Link>} style={{ width: 300 }}>\n                <h4>Description</h4>\n                {item.description}\n                <h4>Start Date</h4>\n                {item.startDate}\n                <h4>End Date</h4>\n                {item.endDate}\n              </Card>\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n\n  }\n}\n\nListComponent.propTypes = {\n  title: PropTypes.string.isRequired,\n  subTitle: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  goBack: PropTypes.func\n};\n\nexport default ListComponent;","import React, { Component } from 'react';\nimport ListItems from '../components/list'\nimport Page from '../components/Page';\n\nimport { events, listEvents } from '../services/events-service';\n\nclass EventsView extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      events: []\n    }\n  }\n  componentDidMount() {\n    listEvents().then((data) => {\n      this.setState({ events: data })\n    }).catch(() => this.setState({ events: [] }))\n  }\n\n  render = () => (\n    <Page>\n      <ListItems title=\"Events\" subTitle=\"Help us take Action!!!\" data={this.state.events} goBack={window.history.back} />\n    </Page>\n  );\n}\n\nexport default EventsView;\n\n","import React, { Component } from 'react';\n\nimport { supporters } from '../services/events-service';\n\nimport Page from '../components/Page';\nimport { Button, List, Skeleton, Card, PageHeader } from 'antd';\nimport { Link } from 'react-router-dom'\n\nclass EventDetailView extends Component {\n  constructor(props) {\n    super(props);\n    let geoCoords = this.props.location.state.location.split(\",\");\n    this.location = { lat: parseFloat(geoCoords[0]), lng: parseFloat(geoCoords[1]) };\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render = () => (\n    <Page>\n      <h1>{this.props.location.state.title}</h1>\n      <p>{this.props.location.state.description}</p>\n      <Button ><Link to={{ pathname: \"/map/\", state: this.location }}>View On Map</Link></Button>\n\n      {/* <Button ></Button> */}\n\n      {/* <Skeleton avatar paragraph={{ rows: 4 }} /> */}\n\n      {/* <Skeleton avatar paragraph ={{ rows: 4 }} /> */}\n\n      <List\n        header={<PageHeader title=\"Supporters\" />}\n        bordered\n        dataSource={supporters}\n        renderItem={item => (\n          <List.Item>\n            <Card size=\"small\" title=\"\" style={{ width: \"100%\" }}>\n\n              <h4>Name: {item.firstName} {item.lastName}</h4>\n              <h4>Email: {item.email}</h4>\n            </Card>\n          </List.Item>\n        )}\n      />\n    </Page>\n  );\n}\n\nexport default EventDetailView;","import React from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"\n\nconst Map = withScriptjs(withGoogleMap((props) => \n  <GoogleMap\n    defaultZoom={8}\n    defaultCenter={props.location}\n    visible={props.visible}\n  >\n    {props.isMarkerShown && <Marker position={props.location } />}\n  </GoogleMap>\n))\n\nexport default Map;","import React, { Component } from 'react';\n\nimport Page from '../components/Page';\nimport Map from '../components/map';\n\nclass MapView extends Component {\n  constructor(props) {\n    super(props);\n    this.API_KEY = 'AIzaSyC6tQ5hqYrwbuiLDK_Ow3IRwiVFdE72nME';\n    console.log('props', props);\n    // this.location = { lat: -34.397, lng: 150.644 };\n    this.location = props.location.state;\n  }\n\n  componentDidMount() {\n  }\n\n  render = () => (\n    <Page>\n      <Map \n      isMarkerShown googleMapURL={'https://maps.googleapis.com/maps/api/js?key=' + this.API_KEY + '&libraries=geometry,drawing,place'}\n      loadingElement={<div style={{ height: `100%` }} />}\n      location={this.location}\n      visible={this.showMap}\n      containerElement={<div style={{ height: `400px` }} />}\n      mapElement={<div style={{ height: `100%` }} />}\n    />\n    </Page>\n  );\n}\n\nexport default MapView;","import React from 'react';\nimport Page from './components/Page';\n\nimport { Button, Skeleton } from 'antd'\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport EventsView from './views/events'\nimport EventDetailView from './views/eventDetail'\nimport MapView from './views/mapView'\n\n// const { Content } = Layout;\n\nfunction Index(props) {\n  return <Page>\n    <Skeleton avatar paragraph={{ rows: 7 }} />\n    <Button block type=\"primary\"><Link to=\"/events/\">Take Action!!!</Link></Button>\n    <Skeleton avatar paragraph={{ rows: 7 }} />\n  </Page>\n}\n\nfunction App() {\n  return (\n    <Router>\n\n\n      <Route path=\"/\" exact component={Index} />\n      <Route path=\"/events/\" component={EventsView} />\n      <Route path=\"/event/:id\" component={EventDetailView} />\n      <Route path=\"/map/\" component={MapView} />\n      {/* <Route path=\"/petitions-detail/\" component={Users} /> */}\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'antd/dist/antd.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}